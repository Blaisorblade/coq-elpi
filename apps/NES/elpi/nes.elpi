namespace nes {

pred ns->modpath i:prop, o:modpath.
ns->modpath (ns _ M) M.

pred open-ns->string i:prop, o:string.
open-ns->string (open-ns S _) S.

pred begin-ns i:string, i:list string, i:list prop, o:list prop.
begin-ns NS Path In Out :-
  if (Path = [])
     (Fresh is NS ^ "_aux_" ^ {std.any->string {new_int} }, coq.env.begin-module Fresh none)
     true,
  coq.env.begin-module NS none,
  coq.env.current-path CP,
  Clause = open-ns NS CP,
  Out = [Clause | In],
  @local! =>
  coq.elpi.accumulate current "NES.db"
    (clause _ (after "open-ns:begin") Clause).

pred subpath i:list string, i:prop.
subpath Path (ns Sub _) :- std.appendR _Prefix Path Sub.

pred submod i:modpath, i:prop.
submod Mod (ns _ SubMod) :-
  coq.modpath->path SubMod SubPath,
  coq.modpath->path Mod ModPath,
  std.appendR ModPath _Suffix SubPath.

pred undup i:list A, i:list A, o:list A.
undup [] _ [].
undup [X|XS] Seen YS :- std.mem! Seen X, !, undup XS Seen YS.
undup [X|XS] Seen [X|YS] :- undup XS [X|Seen] YS.

% end-ns ID Stack ClauseIn ClauseOut
pred end-ns i:string, i:list string, i:list prop, o:list prop.
end-ns NS Stack In Out :- In => std.do! [
  std.rev Stack Path,
  std.append Path [NS|END_] PathNoEnd,
  std.findall (ns PathNoEnd M_) AllNS,
  coq.env.end-module M,
  % stuff inside M
  std.filter AllNS (submod M) SubmodNS,
  % since the current program still sees the clauses that will be dropped
  % after closing M
  undup SubmodNS [] SubmodNSNodup,

  coq.locate-module NS M,
  if (Path = [])
     (std.do! [coq.env.end-module M_aux, coq.env.export-module M_aux, Local = @global!])
     (Local = @local!),
  % NES.Open can put clauses in scope
  std.append Path [NS] NewPath,
  New = [ns NewPath M | SubmodNSNodup],
  std.append In New Out,
  std.forall New (c\ Local => coq.elpi.accumulate current "NES.db" (clause _ _ c)),
].

pred iter-> i:list A, i:list A, i:(A -> list A -> list prop -> list prop -> prop), i:list prop, o:list prop.
iter-> _ [] _ O O :- coq.error "No elements".
iter-> INIT [X] F In Out :- !, F X INIT In Out.
iter-> INIT [X|XS] F In Out :- F X {std.append XS INIT} In Mid, iter-> INIT XS F Mid Out.

pred iter<- i:list A, i:list A, i:(A -> list A -> list prop -> list prop -> prop), i:list prop, o:list prop.
iter<- _ [] _ _ _ :- coq.error "No elements".
iter<- INIT [X] F In Out :- !, F X INIT In Out.
iter<- INIT [X|XS] F In Out :- iter<- INIT XS F In Mid, F X {std.append XS INIT} Mid Out.

% Panics unless [S] well-formed.
pred string->non-empty-ns i:string, o:list string.
string->non-empty-ns S L :- std.do! [
  Ident = "[a-zA-Z_][a-zA-Z_0-9']*",	% non-unicode Coq identifiers
  Path is "^\\(" ^ Ident ^ "\\.\\)*" ^ Ident ^ "$",
  if (rex.match Path S) true (string->ns.err S),
  rex.split "\\." S L,
  if (std.mem L "_") (string->ns.err S) true,
].
pred string->ns.err i:string.
string->ns.err S :-
  coq.error {calc ("NES: Bad <DotSeparatedPath>: \"" ^ S ^ "\"")}.

% Panics unless [S] empty, or well-formed.
pred string->ns i:string, o:list string.
string->ns "" [] :- !.
string->ns S L :- string->non-empty-ns S L.

pred ns->string i:list string, o:string.
ns->string NS S :- nes.join "." NS S.

:index (_ 1)
pred join i:string, i:list string,  o:string.
join _ [] "".
join _ [X] X :- !.
join Sep [X|XS] S :- join Sep XS S0, S is X ^ Sep ^ S0.

pred begin-path i:list string, o:list prop.
begin-path [] [].
begin-path ([_|_] as Path) Out :- std.do! [
  coq.env.current-path CP,
  if (open-ns _ NSCP) (std.assert! (NSCP = CP) "NS: cannot begin a namespace inside a module that is inside a namespace") true,
  std.map {std.findall (open-ns Y_ P_)} open-ns->string Stack,
  if (Stack = []) true (std.do! [
    coq.locate-all {join "." Path} L,
    if (std.do! [
       std.mem L (loc-modpath M),
       coq.modpath->path M MP,
       MP = {std.append CP Path}
    ])
      (iter-> [] Stack end-ns [] _, iter<- [] Stack begin-ns [] _)
      true,
  ]),
  iter<- Stack {std.rev Path} begin-ns [] Out,

  open-super-path Path [],

].

pred std.time-do! i:list prop.
std.time-do! [].
std.time-do! [P|PS] :-
  std.time P T, coq.say P "\ntakes" T "\n",
  !,
  std.time-do! PS.

pred end-path i:list string, o:list prop.
end-path [] [].
end-path ([_|_] as Path) Out :- std.do! [
  std.map {std.findall (open-ns X_ P_)} nes.open-ns->string Stack,
  std.assert! (std.appendR {std.rev Path} Bottom Stack) "NES: Ending a namespace that is not begun",
  nes.iter-> Bottom {std.rev Path} nes.end-ns [] Out,
].


pred open-path i:list string.
open-path Path :- std.do! [
  std.map {std.findall (ns Path M_)} nes.ns->modpath Mods,
  std.forall Mods coq.env.import-module
].

pred open-super-path i:list string, i:list string.
open-super-path [] _.
open-super-path [P|PS] ACC :-
  std.append ACC [P] Cur,
  open-path Cur,
  open-super-path PS Cur.

% Currently open namespace, or [].
pred current-path o:list string.
current-path NS :- std.do! [
  std.map {std.findall (open-ns X_ P_)} nes.open-ns->string Stack,
  std.rev Stack NS,
].

% Find an existing namespace, or panic.
pred resolve i:string, o:list string.
resolve S Path :- std.do! [
  if (Top = "^_\\.", rex.match Top S) (std.do! [
    rex.replace Top "" S S',
    string->non-empty-ns S' NS,
    if (ns NS _) (Path = NS) (resolve.err S'),
  ])(
    resolve.walk S {current-path} {string->non-empty-ns S} Path
  ),
].
pred resolve.walk i:string, i:list string, i:list string, o:list string.
resolve.walk S Ctx SP Path :- std.do! [
  std.append Ctx SP Candidate,
  ( ns Candidate _, Path = Candidate
  ; Ctx = [], resolve.err S
  ; resolve.walk S {std.drop-last 1 Ctx} SP Path ),
].
pred resolve.err i:string.
resolve.err S :- coq.error "NES: Namespace not found:" S.

% The (closed) namespace [NS] containing global [GR], or [].
pred gref->path i:gref, o:list string.
gref->path GR NS :- std.do! [
  coq.gref->path GR MP,
  if (gref->path.aux MP NS) true (NS = []),
].
pred gref->path.aux i:list string, o:list string.
gref->path.aux MP NS :- ns NS M, coq.modpath->path M MP, !.

% Print a namespace
pred print-path i:list string, i:(gref -> coq.pp -> prop).
print-path Path PP :- std.do! [
  std.map {std.findall (ns Path _)} (p\ mp\ p = ns _ mp) MPs,
  print.pp-list MPs (print.pp-module Path PP) Out,
  coq.say {coq.pp->string Out},
].
namespace print {

  pred pp-list i:list A, i:(A -> coq.pp -> prop), o:coq.pp.
  pp-list L F Out :- std.do! [
    std.map-filter L F PPs,
    Out = coq.pp.box (coq.pp.v 0) {std.intersperse (coq.pp.brk 0 0) PPs},
  ].

  kind context type.
  type context
    list string ->	% readable path
    int ->	% length of full path
    (gref -> coq.pp -> prop) ->
    context.

  % Hides `aux` modules
  pred readable-path i:context, i:list string, o:list string.
  readable-path (context Prefix N _) FullPath Path :- std.do! [
    std.drop N FullPath RelPath,
    std.append Prefix RelPath Path,
  ].

  pred module-context i:list string, i:modpath, i:(gref -> coq.pp -> prop), o:context.
  module-context Prefix MP PP Ctx :- std.do! [
    coq.modpath->path MP FullPath,
    Ctx = context Prefix {std.length FullPath} PP,
  ].

  pred submodule-context i:context, i:modpath, o:context.
  submodule-context (context _ _ PP as Ctx) MP Ctx' :- std.do! [
    coq.modpath->path MP FullPath,
    readable-path Ctx FullPath Path,
    Ctx' = context Path {std.length FullPath} PP,
  ].

  pred pp-module i:list string, i:(gref -> coq.pp -> prop), i:modpath, o:coq.pp.
  pp-module Prefix PP MP Out :- std.do! [
    pp-module-items {module-context Prefix MP PP} {coq.env.module MP} Out,
  ].

  pred pp-module-items i:context i:list module-item, o:coq.pp.
  pp-module-items Ctx Items Out :-
    pp-list Items (pp-module-item Ctx) Out.

  pred pp-module-item i:context, i:module-item, o:coq.pp.
  pp-module-item (context _ _ PP) (gref GR) Out :- PP GR Out, !.
  pp-module-item Ctx (submodule MP Items) Out :- std.do! [
    pp-module-items {submodule-context Ctx MP} Items Out,
  ].
  pp-module-item Ctx (module-type MTP) Out :- pp-modtypath Ctx MTP Out.
  pp-module-item Ctx (module-type-functor MTP _) Out :- pp-modtypath Ctx MTP Out.
  pp-module-item Ctx (module-functor MP _) Out :- pp-modpath Ctx MP Out.

  pred pp-path i:context, i:string, i:list string, o:coq.pp.
  pp-path Ctx What FullPath Out :- std.do! [
    readable-path Ctx FullPath Path,
    Out = coq.pp.box coq.pp.h [
      coq.pp.str What, coq.pp.spc,
      coq.pp.str {nes.join "." Path},
    ],
  ].

  pred pp-modtypath i:context, i:modtypath, o:coq.pp.
  pp-modtypath Ctx MTP Out :- std.do! [
    pp-path Ctx "Module Type" {coq.modtypath->path MTP} Out,
  ].

  pred pp-modpath i:context, i:modpath, o:coq.pp.
  pp-modpath Ctx MP Out :- std.do! [
    pp-path Ctx "Module" {coq.modpath->path MP} Out,
  ].
}

}
