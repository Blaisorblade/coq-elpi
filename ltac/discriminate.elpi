/* core of discriminate                                                      */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

shorten std.{ do! }.

namespace ltac {

% Tests if the command can be applied
pred discriminate? i:term, i:@gref, o:list term, o:@gref, o:term, o:term.
discriminate? Ty GR Args GRA A B :- do! [
  coq.locate "Coq.Init.Logic.eq" (indt GReq),
  whd Ty [] (indt GReq) [T,A,B],
  whd T [] (indt GR) Args,
  whd A [] (indc GRA) _,
  whd B [] (indc GRB) _,
  not(GRA = GRB)
].

% Does the job
pred discriminate! i:term, i:term, o:term, i:@gref, i:list term, i:@gref, i:term, i:term.
discriminate! H G PG GR Args GRA A B :- do! [
  coq.locate "Coq.Init.Datatypes.bool" Bool,
  coq.locate "elpi.bool_discr" BD,
  coq.locate "elpi.eq_f" EQF,
  isK-db GRA IsKA,
  mk-app IsKA Args IsKAArgs,
  Eq_isKA_isKB = app[EQF,app[indt GR|Args],Bool,IsKAArgs,A,B,H],
  PG = app[BD,Eq_isKA_isKB,G]
].

pred discriminate i:term, i:term, i:term, o:term.
discriminate H EqAB G PG :-
  if (discriminate? EqAB    GR Args GRA A B)
     (discriminate! H G PG  GR Args GRA A B)
  (coq.error "discriminate: the equation" {coq.term->string H} "of type" {coq.term->string EqAB} "is trivial at the top level").

}

% vim:set ft=lprolog spelllang=:
