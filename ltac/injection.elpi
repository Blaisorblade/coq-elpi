/* core of injection                                                         */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% Tests if the command can be applied
injection? Ty GR Args GRA A AArgs B :- do! [
  coq.locate "Coq.Init.Logic.eq" (indt GReq),
  whd Ty [] (indt GReq) [T,A,B],
  whd T [] (indt GR) Args,
  whd A [] (indc GRA) AArgs,
  whd B [] (indc GRB) _,
  GRA = GRB
].

injection-arg-i EQF GRA Args A B H J Dflt R :-
  I is J + 1,
  if (projK-db GRA I Proj) (do! [
      mk-app Proj Args Projector,
      mk-app Projector [Dflt] ProjectorDflt,
      TyDflt = hole,
      mk-app EQF [TyDflt,ProjectorDflt,A,B,H] R
  ]) true.

% Does the job
injection! H L PL GR Args GRA A AArgs B :- do! [
  coq.locate "elpi.eq_f" EQF,
  map-i AArgs (injection-arg-i (app[EQF,app[indt GR|Args]]) GRA Args A B H) PL,
  L = []
].


injection H EqAB L PL :-
  if (injection? EqAB    GR Args GRA A AArgs B)
     (injection! H L PL  GR Args GRA A AArgs B)
  (coq.error "injection:" {pp H} "does not equate equal constructors").

% vim:set ft=lprolog spelllang=:
