/* core of injection                                                         */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

namespace ltac.injection {

arg-i MAX MAX _ _ _ _ _ _ _ _ _ [] :- !.
arg-i J MAX EQF GR TyArgs Pno GRK KArgs A B H R :- J < MAX,
  I is J + 1,
  if (projK-db GRK I Proj) (do! [
      drop Pno KArgs Defaults,
      mk-app Proj {append TyArgs Defaults} Projector,
      mk-app (indt GR) TyArgs Ty,
      coq.typecheck Projector (prod _ _ _\Ty2), % FIXME whd
      mk-app EQF [Ty,Ty2,Projector,A,B,H] P,
      R = [P|RS]
  ]) (R = RS),
 arg-i I MAX EQF GR TyArgs Pno GRK KArgs A B H RS.

}

namespace ltac {

% Tests if the command can be applied
injection? Ty GR TyArgs GRK KArgs A B :- do! [
  coq.locate "Coq.Init.Logic.eq" (indt GReq),
  whd Ty [] (indt GReq) [T,A,B],
  whd T [] (indt GR) TyArgs,
  whd A [] (indc GRK) KArgs,
  whd B [] (indc GRB) _,
  GRK = GRB
].

% Does the job
injection! H PL GR TyArgs GRK KArgs A B :- do! [
  coq.locate "elpi.eq_f" EQF,
  coq.env.indt GR _ Pno _ _ _ _,
  length KArgs Argsno,
  Eqno is Argsno - Pno,
  ltac.injection.arg-i 0 Eqno EQF GR TyArgs Pno GRK KArgs A B H PL
].

% Main entry point with assertion that H can be injected
injection H EqAB _ PL :-
  if (injection? EqAB    GR TyArgs  GRK KArgs  A B)
     (injection! H PL    GR TyArgs  GRK KArgs  A B)
     (coq.error "injection:" {coq.term->string H} "of type"
                {coq.term->string EqAB} "does not equate equal constructors").

}

% vim:set ft=lprolog spelllang=:
