accumulate coq-term.

% Coq's API

type  coq-say A -> prop.
mode (coq-say i).
coq-say X :- $coq-say X.

type $$$say A -> prop.

type  coq-locate string -> term -> prop.
mode (coq-locate i         o).
coq-locate Name Term :- $coq-locate Name Term.

type  coq-env-const @gref -> term -> term -> prop.
mode (coq-env-const i        o       o).
coq-env-const Name Bo Ty :- $coq-env-const Name Bo Ty.

type  coq-typecheck term -> term -> prop.
mode (coq-typecheck i       o).
coq-typecheck Bo Ty :- $coq-typecheck Bo Ty.

type  coq-elaborate term -> term -> term -> prop.
mode (coq-elaborate i       o       o).
coq-elaborate Bo Bo1 Ty1 :- $coq-elaborate Bo Bo1 Ty1.

% Pretty printer using the name hints
type pp A -> B -> prop.
mode (pp i o).

pp (app L) (app L1) :- !, pp-list L L1.
pp (prod N T F) (prod N T1 F1) :- !, pp T T1, pi x\ (pp x N :- !) => pp (F x) (F1 x).
pp (lam N T F) (lam N T1 F1) :- !, pp T T1, pi x\ (pp x N :- !) => pp (F x) (F1 x).
pp (let N T B F) (let N T1 B1 F1) :- !, pp T T1, pp B B1, pi x\ (pp x N :- !) => pp (F x) (F1 x).
pp (fix N R T B) (fix N R T1 B1) :- !, pp T T1, pi f\ (pp f N :- !) => pp (B f) (B1 f).
pp (match A R B) (match A1 R1 B1) :- !, pp A A1, pp R R1, pp-list B B1.
pp (indt KN) KN :- !.
pp (indc KN) KN :- !.
pp (const KN) KN :- !.
pp X X :- !.
pp _ "unprintable" :- !. % cannot fail

mode (pp-list i o).
pp-list [] [].
pp-list [X|XS] [Y|YS] :- !, pp X Y, pp-list XS YS.

subst-prod [] P P.
subst-prod [X|XS] (prod _ _ F) P :- subst-prod XS (F X) P.

subst-lam [] T T.
subst-lam [X|XS] (lam _ _ F) T :- subst-lam XS (F X) T.

prod-2-lam (prod _ T F) (lam _ T R) :- !, pi x\ prod-2-lam (F x) (R x).
prod-2-lam X X.


% vim:set ft=lprolog spelllang=:

