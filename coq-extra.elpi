/* coq-elpi: Coq terms as the object language of elpi                        */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% extra typing declarations %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type indc string -> term.
type indt string -> term.

%%%%%%%%%%%%%%%%%%%
% generic helpers %
%%%%%%%%%%%%%%%%%%%
  

pred perm-op i:(@name -> term -> (term -> term) -> term),
     i:(list A -> list A -> prop), i:int, i:term, o:term.
perm-op Op Perm Nb (Op N T B) (Op N' T' B') :- !,
  perm-op-aux Op Perm Nb (Op N T B) [] (Op N' T' B') [].

pred perm-op-aux i:(@name -> term -> (term -> term) -> term),
     i:(list A -> list A -> prop), i:int,
     i:term, i:(list (pair (pair string term) term)),
     o:term, o:(list (pair (pair string term) term)).
%@log(perm-op-aux _ _ _ _ _ _ _).
perm-op-aux Op Perm Nb (Op N T B) Acc (Op N' T' B') Acc' :- Nb > 0, !,
  Nb' is Nb - 1,
  (pi x\
    perm-op-aux Op Perm Nb' (B x) [pr (pr N T) x|Acc] (B' x) (Acc'x x),
    Acc'x x = [pr (pr N' T') x|Acc']).
perm-op-aux _Op Perm 0 B Acc B' Acc'' :- !,
  Perm {rev Acc} RevAcc', rev RevAcc' Acc',
  % $coq-say "Acc=" Acc, $coq-say "Acc'=" Acc',
  map2 Acc Acc' (a\ a'\ res\ sigma X Y TX TY\
    a = pr TX X, a' = pr TY Y,
    res = (copy Y X :- !)) Rename,
  % $coq-say "Rename=" Rename,
  % $coq-say "B=" B,
  Rename => (
    copy B B',
    % $coq-say "B'=" B',
    map2 Acc Acc'
      (a\ a'\ res\ sigma X Y NX NY TX TY TY'\
      a = pr (pr NX TX) X, a' = pr (pr NY TY) Y,
      copy TY TY', res = pr (pr NY TY') X) Acc'').
  %$coq-say "Acc''=" Acc''

pred eta-perm i:(list A -> list A -> prop), i:int,
  i:term, i:term, o:term, o:term.
eta-perm Perm Nb P B P' B' :- !,
  mk-eta Nb P B EtaB, !,
  perm-op prod Perm Nb P P', !,
  perm-op lam Perm Nb EtaB B'.

pred let-perm i:(list A -> list A -> prop), i:int,
  i:@name, i:term, i:term, o:((term -> term) -> term).
let-perm Perm Nb Name Ty X (let Name Ty' X') :- !,
  eta-perm Perm Nb Ty X Ty' X'.


