/* Coq terms as the object language of elpi and basic API to access Coq      */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Coq's terms
%
% Types of term formers, to be kept in sync with HOAS embedding in
% coq_elpi_HOAS.ml
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Data types that are opaque to LP: cannot be manipulated directly
macro @gref :- ctype "Globnames.global_reference". % name for a global constant
macro @univ :- ctype "Univ.Universe.t".            % universes
macro @name :- ctype "Name.t".                     % name hint (compare as =)
macro @id   :- string.                             % identifiers

% Universes (for the "sort" term former)
kind universe type.
type prop universe.          % impredicative sort of propositions
type typ  @univ -> universe. % predicative sort of datatypes (carries a level)

% -- terms ------------------------------------------------------------------
kind term type.

type sort  universe -> term. % Prop, Type@{i}

% constants: inductive types, inductive constructors, definitions
type indt  @gref -> term. % nat, list, ...
type indc  @gref -> term. % O, S, nil, cons, ...
type const @gref -> term. % Nat.add, List.append, ...

% binders: to form functions, arities and local definitions
type lam  @name -> term -> (term -> term) -> term.         % fun x : t =>
type prod @name -> term -> (term -> term) -> term.         % forall x : t,
type let  @name -> term -> term -> (term -> term) -> term. % let x := v : T in

% other term formers: function application, pattern matching and recursion
type app   list term -> term.                   % app [hd|args]
type match term -> term -> list term -> term.   % match t p [branch])
type fix   @name -> int -> term -> (term -> term) -> term. % fix name rno ty bo

% implicit argument (missing term)
type hole  term.

% -- helpers -----------------------------------------------------------------
macro @cast T TY :- (let `cast` TY T x\x).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Coq's evar_map
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% An evar_info 
%
% x : t
% y := v : x
% ----------
% p x y
%
% is coded as an elpi goal
% 
% pi x1\ decl x1 "x" `t` => pi x2\ def x2 "y" `v` Vn x1 =>
%   declare-evar
%      [decl x1 "x" `t`, def x2 "y" `v` Vn x1] (Evar x1 x2) (`p` x1 x2)
%
% where, by default, declare-evar creates a syntactic constraint as
%
%   decl x1 "x" `t`, def x2 "y" `v` `vn` x1 ?-  evar (Evar x1 x2) (`p` x1 x2)
%   
% When the program is over, a remaining syntactic constraint like the one above
% is read back and transformed into the corresponding evar_info.
%
% The client may want to provide an alternative implementation of
% declare-evar that, for example, typechecks the term assigned to Evar.

pred decl i:term, o:@name, o:term. % Var Name Ty
pred def  i:term, o:@name, o:term, o:term, o:term. % Var Name Bo BoNorm Ty
pred declare-evar i:list prop, i:term, i:term. % Ctx Evar Ty
:name "default-declare-evar"
declare-evar Ctx Ev Ty :- evar Ev Ty Ev.

constraint evar def decl pp read-evar { }
pred evar i:term, i:term, o:term. % Evar Ty RefinedSolution
evar (?? as X) T  S :- !, declare_constraint (evar X T S) [X].
:name "default-assign-evar"
evar _ _ _. % volatile, only unresolved evars are considered as evars

coq-evd-print :- print_constraints.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Coq's tactic invocation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

kind extra-info type.
type goal-name @name -> extra-info.

macro @goal-ctx :- list prop. % only decl and def entries

kind goal type.
type goal @goal-ctx -> term -> term -> list extra-info -> goal.

kind tactic-argument type.
type int int -> tactic-argument.
type str string -> tactic-argument.
type trm term -> tactic-argument.

pred solve i:list tactic-argument, i:list goal, o:list goal.

% The entry point of a tactic is
%
%  solve [goal Ctx Solution Ty ExtraInfo]
%
% where Ctx is a list of decl or def and Solution is a unification variable
% to be assigned to a term of type Ty in order to make progress.
% ExtraInfo contains
% a list of "extra logical" data attached to the goal.
%
% Note: currently the goal list is always of length 1 and the ExtraInfo list
% is empty.
%
% The invocation of a tactic with arguments: 3 x "y" (h x)
% on a goal named "?Goal2" with a sequent like
%
% x : t
% y := v : x
% ----------
% g x y
%
% is coded as an elpi goal
% 
% (pi x1\ decl x1 "x" `t` => pi x2\ def x2 "y" `v` Vn x1 =>
%   declare-evar
%      [decl x1 "x" `t`, def x2 "y" `v` Vn x1]
%      (Evar x1 x2) (`g` x1 x2)),
% (pi x1\ pi x2\
%   solve
%     [int 3, str "x", str"y", trm (app[const "h",x1])]
%     [goal
%        [decl x1 "x" `t`, def x2 "y" `v` Vn x1]
%        (Evar x1 x2) (`g` x1 x2)
%        [goal-name `?Goal2`]]
%     NewGoals
%
% If the goal sequent contains other evars, then a tactic invocation is
% an elpi query made of the conjunction of all the declare-evar queries
% corresponding to these evars and the query corresponding to the goal
% sequent. NewGoals can be assigned to a list of goals that should be
% declared as open. Omitted goals are shelved. If NewGoals is not
% assigned, then all unresolved evars become new goals, but the order
% of such goals is not specified.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Coq's API
%
% To be kept in sync with coq_elpi_API.ml
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

external type coq-say variadic any prop.

external type coq-warn variadic any prop.

% Prints and *aborts* the program. LP's fatal-error uses this one
external type coq-error variadic any prop.

% Nametab %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

external pred coq-locate i:string, o:term.

macro @modpath :- ctype "ModPath.t".
external pred coq-locate-module i:string, o:@modpath.

macro @modtypath :- ctype "ModTypePath.t".
external pred coq-locate-module-type i:string, o:@modtypath.

% Environment: read %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

external pred coq-env-const i:@gref, o:term, o:term.

external pred coq-env-indt i:@gref, o:bool, o:int, o:int, o:term, o:list term, o:list term.

external pred coq-env-indc i:@gref, o:int, o:int, o:term.

external pred coq-env-module i:@modpath, o:list term.

external pred coq-env-module-type i:@modtypath, o:list string.

external pred coq-env-typeof-gr i:@gref, o:term.

% Environment: write %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Note: universe constraints are taken from ELPI's constraints
% store. Use coq-univ-* and coq-elaborate to add constraints.

external pred coq-env-add-const i:string, i:term, i:term, o:term.

kind indt-decl type.
kind indc-decl type.
kind attribute type.
type coercion attribute.
macro @attrs :- list attribute. 

type parameter   @name -> term -> (term -> indt-decl) -> indt-decl.
type inductive   @id -> term -> (term -> list indc-decl) -> indt-decl.
type coinductive @id -> term -> (term -> list indc-decl) -> indt-decl.
type constructor @id -> term -> indc-decl.
type record      @id -> term -> @id -> record-decl -> indt-decl.
type field       @attrs -> @id -> term -> (term -> record-decl) -> record-decl.
type end-record  record-decl.

external pred coq-env-add-indt i:indt-decl, o:term.

external pred coq-env-begin-module i:@id, i:@modtypath.

external pred coq-env-end-module o:@modpath.

external pred coq-env-begin-module-type i:@id.

external pred coq-env-end-module-type o:@modtypath.

external pred coq-env-include-module i:@modpath.

external pred coq-env-include-module-type i:@modtypath.

kind instance type.
type instance term -> int -> instance. % Value, Priority

external pred coq-univ-max i:@univ, i:@univ, o:@univ.

external pred coq-univ-sup i:@univ, o:@univ.

external pred coq-univ-new i:list @id, o:@univ.

external pred coq-univ-leq i:@univ, i:@univ.

external pred coq-univ-eq i:@univ, i:@univ.

external pred coq-univ-print-constraints.

% don't use
external pred coq-univ-algebraic-max i:@univ, i:@univ, o:@univ.
external pred coq-univ-algebraic-sup i:@univ, o:@univ.


% Databases (TC, CS, Coercions) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Name, Precedence, Global?
external pred coq-TC-declare-instance i:@gref, i:int, i:bool.

external pred coq-CS-declare-instance i:@gref.

kind canonical type.
type canonical term -> term -> term -> canonical. % Proj, Value, Instance

external pred coq-CS-db o:list canonical.

kind instance type.
type instance term -> int -> instance. % Value, Priority

external pred coq-TC-db o:list instance.

external pred coq-TC-db-for i:@gref, o:list instance.

external pred coq-TC-is-class i:@gref.

% GR, From, To, Global?
% To can (also) be {{ _ -> _ }} or {{ Type }} for Funclass or Sortclass
external pred coq-coercion-declare i:@gref, i:term, i:term, i:bool.

% Coq's functionalities %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% typchecks a closed term (no holes, no context)
external pred coq-typecheck i:term, o:term.

% elabotares terms that can contain "hole".  It is able to work in
% a proof and hypothetical context, as long as all bound variables
% are accompained by a decl or def hypothesis.
% Limitation: the resulting term has to be evar free (no undersolved holes).
% Note: adds Coq's universe constraints to ELPI's constraints store.
% call this before adding anything to the env, on both body and type.
external pred coq-elaborate i:term, o:term, o:term.

% Datatypes conversions %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% extracts the label
external pred coq-gr->id i:@gref, o:@id.
external pred coq-gr->id i:@id,   o:@id.

external pred coq-gr->string i:@gref, o:string.
external pred coq-gr->string i:@id,   o:string.

external pred coq-string->name i:string, o:@name.

% partial, fatal error if the name is "_"
external pred coq-name->id i:@name, o:@id.

