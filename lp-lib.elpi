/* coq-elpi: Coq terms as the object language of elpi                        */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% TODO : Move to elpi

:name "default-fatal-error"
fatal-error Msg :- $print Msg, halt.

:name "default-debug-print"
debug-print Msg Data :- $print Msg Data.

fatal-error-w-data Data Msg :-
  $term_to_string Data S, M is Msg ^ ": " ^ S, fatal-error M.

type tt bool.
type ff bool.

% to silence the type checker
type unsafe-cast A -> B -> prop.
unsafe-cast X X.

type  if prop -> prop -> prop -> prop.
mode (if i i i).
if B T _ :- B, !, T.
if _ _ E :- E.

type  rev list A -> list A -> prop.
mode (rev i         o).
rev L RL  :- rev-aux L []  RL .
rev-aux [X|XS] ACC R :- rev-aux XS [X|ACC] R.
rev-aux [] L L.

type  append list A -> list A -> list A -> prop.
mode (append i i o).
append [X|XS] L [X|L1]  :- append XS L L1 .
append [] L L .

% trace call
type  spy prop -> prop.
mode (spy i).
spy P :- debug-print "----<<---- enter: " P,
         P,
         debug-print "---->>---- exit: " P, !.
spy P :- debug-print "---->>---- fail: " P, fail.


type  take int -> list A -> list A -> prop.
mode (take i i o).
take 0 _ [].
take N [X|XS] [X|L] :- N1 is N - 1, take N1 XS L.
take _ _ _ :- fatal-error "take run out of list items".

type  drop int -> list A -> list A -> prop.
mode (drop i i o).
drop 0 L L.
drop N [_|XS] L :- N1 is N - 1, drop N1 XS L.
drop _ _ _ :- fatal-error "take run out of list items".

type  split-at int -> list A -> list A -> list A -> prop.
mode (split-at i      i         o         o).
split-at 0 L [] L :- !.
split-at N [X|XS] [X|LN] LM :- !, N1 is N - 1, split-at N1 XS LN LM.
split-at _ _ _ _ :- fatal-error "split-at run out of list items".

type  fold list B -> A -> (B -> A -> A -> prop) -> A -> prop.
mode (fold i                        i         i    o).
fold [] A _ A.
fold [X|XS] A F R :- F X A A1, fold XS A1 F R.

type  fold2 list C -> list B -> A -> (C -> B -> A -> A -> prop) -> A -> prop.
mode (fold2 i         i         i    i                             o).
fold2 [] [_|_] _ _ _ :- fatal-error "fold2 on lists of different length".
fold2 [_|_] [] _ _ _ :- fatal-error "fold2 on lists of different length".
fold2 [] [] A _ A.
fold2 [X|XS] [Y|YS] A F R :- F X Y A A1, fold2 XS YS A1 F R.

type  map list A -> (A -> B -> prop) -> list B -> prop.
mode (map i                   i         o).
map [] _ [].
map [X|XS] F [Y|YS] :- F X Y, map XS F YS.

type  map-i list A -> (int -> A -> B -> prop) -> list B -> prop.
mode (map-i i                   i         o).
map-i L F R :- map-i-aux L 0 F R.
map-i-aux [] _ _ [].
map-i-aux [X|XS] N F [Y|YS] :- F N X Y, M is N + 1, map-i-aux XS M F YS.

type  map2 list A -> list B -> (A -> B -> C -> prop) -> list C -> prop.
mode (map2 i                        i         i         o).
map2 [] [_|_] _ _ :- fatal-error "map2 on lists of different length".
map2 [_|_] [] _ _ :- fatal-error "map2 on lists of different length".
map2 [] [] _ [].
map2 [X|XS] [Y|YS] F [Z|ZS] :- F X Y Z, map2 XS YS F ZS.

type  nth int -> list A -> A -> prop.
mode (nth i i o).
nth 0 [X|_] X :- !.
nth N [_|XS] R :- !, N1 is N - 1, nth N1 XS R.
nth _ _ _ :- fatal-error "nth run out of list items".

type  ignore-failure prop -> prop.
mode (ignore-failure i).
ignore-failure P :- P, !.
ignore-failure _.

type  assert prop -> string -> prop.
mode (assert i       i).
assert Cond Msg :- if Cond true (fatal-error-w-data Cond Msg).

% vim:set ft=lprolog spelllang=:

