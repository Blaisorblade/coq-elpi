/* Boolean comparison functions                                             */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

derive-eq-bo-and [] [] _ {{true}}.
derive-eq-bo-and [X] [Y] [T] (app[F,X,Y]) :- !, spy(eq-db T F).
derive-eq-bo-and [X|XS] [Y|YS] [T|TS] {{ (lp:R && lp:RS)%bool }} :-
  eq-db T F, R = app[F,X,Y], derive-eq-bo-and XS YS TS RS.

derive-eq-ty3 _ _ _ {{bool}}.
derive-eq-bo3 Kno Vars1 Kno _ Vars2 VarsTy R :- !,
  derive-eq-bo-and Vars1 Vars2 VarsTy R.
derive-eq-bo3 Kno1 _ Kno2 _ _ _ {{false}}.

derive-eq-ty2 _ _ Tys R :- rev Tys [T|_], R = {{lp:T -> bool}}.
derive-eq-bo2 Ity GR Args Kno Kty Vars VarsTy R :-
  R = {{ fun (x2 : lp:Ity) => lp:Bo x2 }},
  pi x2 \
    build-match-skeleton x2 GR Args
      derive-eq-ty3 (derive-eq-bo3 Kno Vars) (Bo x2).
  
derive-eq-clause [] HD P (eq-db HD P).
///////////////////
  XXX P should be the conjunction of all eq-db on Args
%%%%%
derive-eq-clause [X|XS] HD P Ps (pi x\ C x) :-
  pi x\ sigma HDx \
    mk-app HD [x] HDx, derive-eq-clause XS HDx P (C x).

derive-eq-bo-params 0 Ity Arity R :- !,
  R = {{fix f (x1 : lp:Ity) {struct x1}
              : lp:Ity -> lp:Ity -> bool := lp:Bo f x1 }},
  safe-dest-app Ity (indt GR) Args,
  pi f x1 \ sigma C\
    % for non uniform derive-eq-clause Args (indt GR) f [] C,
    C = (eq-db Ity f),
    C =>
    build-match-skeleton x1 GR Args
      derive-eq-ty2 (derive-eq-bo2 Ity GR Args) (Bo f x1).

derive-eq-bo-params N Ity (prod Name Sty Rty) R :- M is N - 1,
  R = {{ fun (A : lp:Sty) (eqA : A -> A -> bool) => lp:Bo A eqA }},
  pi a f \  sigma ItyA \
    mk-app Ity [a] ItyA, 
    eq-db a f => derive-eq-bo-params M ItyA (Rty a) (Bo a f).

derive-eq GR :-
  coq-env-indt GR Ind Lno Luno Arity _ _,
  assert (Ind = tt) "derive-eq: Coinductive types are not supported",
  assert (Lno = Luno) "derive-eq: Non-uniform parameters not supported",
  derive-eq-bo-params Lno (indt GR) Arity R,
  coq-say R,
  Name is {coq-gr->id GR} ^ "_eq",
  coq-env-add-const Name R _ _ _.

