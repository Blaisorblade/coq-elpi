/* constant elimination                                                      */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

namespace derive.constsimplifier {

strip-last-arg (app [Hd|Args]) X R :-
  appendR Prefix [X] Args,
  if (Prefix = []) (R = Hd) (R = app[Hd|Prefix]).

trivial? T P :-
  strip-last-arg T X Pred,
  prove Pred Proof, mk-app Proof [X] P.

prove X _ :- coq.say "prove" X, fail.
prove X P :- param1P-db X P.
prove (app[X|Args]) (app[P|PArgs]) :-
  param1P-db X P,
  prove-args Args PArgs.

prove-args [] [].
prove-args [X,PX|Args] [X,PX,QX|PArgs] :-
  prove PX QX,
  prove-args Args PArgs.

hyp (prod _ S T) T1 H Args (lam `_` S _\ R) :-
  /*safe-dest-app S HD ArgsS, appendR As [_] ArgsS,
  constant? HD As, !,
  pi x\ hyp (T x) T1 H Args R.*/ trivial? S P, !,
  hyp (T P) T1 H Args R.

hyp (prod N S T) (prod N S T1) H Args (lam N S R) :- !,
  pi x\ hyp (T x) (T1 x) H [x|Args] (R x).

hyp T T H A R :- mk-app H {rev A} R.

% Looks like a property on the parameter: specialize
body (prod N (sort _ as S) x\
       prod _ (prod _ x _\ sort _) px\ T x px) B Args (lam N S R) :- !,
  pi x\ sigma A\
    A = {{ @elpi.derive.param1.UnitPred lp:x }},
    decl x N S =>
      body (T x A) B [A,x|Args]  (R x).

% A trivial premise: prove
body (prod N S T) B Args R :- trivial? S P, !,
  body (T P) B [P|Args] R.

% A regular premise: recursively simplify
body (prod N S T) B Args (lam N TX R) :- !,
  pi x\
    hyp S TX x [] (A x),
    decl x N SX =>
      body (T x) B [A x|Args] (R x).

% done
body _ B Args R :- mk-app B {rev Args} R.

log P :- P, !.
log _ :- coq.say "type checking fails", fail.

main T O [] :- do! [
  coq.env.typeof-gr {term->gr T} Ty,
  body Ty T [] NewBo,
  coq.say {coq.term->string NewBo},
  log (coq.typecheck NewBo NewTy),
  % TODO: also fix eta expansions
  (pi F X T\ copy (app [lam _ _ F, X]) T :- !, copy (F X) T) =>
     copy NewTy NewTyNice,
  coq.env.add-const O NewBo NewTyNice _ _
].

}
