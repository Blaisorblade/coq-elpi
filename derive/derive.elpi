/* Entry point for all derivations                                           */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

namespace derive {

pred chain i:list (list prop -> prop).
:if "DBG:derive" chain [X|_] :- coq.say {counter "run"} X, fail.
chain [].
chain [F|FS] :- spy(F C), !, C => chain FS.
chain [F|FS] :- coq.say "Derivation fails: " F, chain FS.


begin_ns N [] :- coq.env.begin-module N _.
end_ns [] :- coq.env.end-module _.

param1p T N C :-
  reali T P, !,
  derive.param1P.main P N C.

invert T N C :-
  reali T P, !,
  derive.invert.main P N C.

mapR T N C :-
  reali T R, !,
  derive.map.main R N C.

simplify P N C :-
  P T,
  derive.constsimplifier.main T N C.

main I M :- do! [
  coq.locate I T,
  coq.env.begin-module M _,
  chain [
    derive.eq.main T "eq",
    begin_ns "is",
      derive.isK.main T "",
    end_ns,
    derive.map.main T "map",
    begin_ns "injection",
      derive.projK.main T "",
    end_ns,
    begin_ns "param1",
      derive.param1.main T "",
      param1p T "P",
      mapR T "map",
      begin_ns "inv",
        invert T "",
      end_ns,
    end_ns,
    begin_ns "induction",
      derive.induction.main T "principle",
    end_ns,
    simplify (induction-db T) "induction"
  ],
  coq.env.end-module _
].
  
}
