
derive-cast-arity [] _ (sort (typ U)) :- coq-univ-new [] U.
derive-cast-arity [V|VS] Acc (prod `x` T R) :-
  mk-app V {rev Acc} T,
  pi x\ derive-cast-arity VS [x|Acc] (R x).

derive-cast-args [] [X|_] X.
derive-cast-args [V|VS] Acc (lam `c` S R) :-
  mk-app V {rev Acc} S,
  pi c\ derive-cast-args VS [c|Acc] (R c).

derive-cast-arg _ _ _ _ _ [] _ [].
derive-cast-arg I E X Y Ps [V|VS] Acc [R|RS] :-
  castP-db I T,
  take {calc (I )} Ps PsI,
  mk-app T {append {append PsI [X,Y,E]} {append {rev Acc} [V]}} R,
  J is I + 1,
  derive-cast-arg J E X Y Ps VS [V|Acc] RS.

derive-cast-args-ty E X Y Ps [] [_|Acc] R :-
  rev Ps [V|_],
  rev Acc [_|Vars],
  derive-cast-arg 2 E X Y Ps Vars [] CastedVars,
  mk-app V [X|CastedVars] R.
derive-cast-args-ty E X Y Ps [V|VS] Acc (prod `c` S R) :-
  mk-app V {rev Acc} S,
  pi c\ derive-cast-args-ty E X Y Ps VS [c|Acc] (R c).


derive-cast-bo I J V (lam Name T R) :- I > 0, !,
  coq-name-suffix `A` {calc (J - I)} Name,
  I1 is I - 1,
  derive-cast-arity {rev V} [] T,
  pi x\ derive-cast-bo I1 J [x|V] (R x).
derive-cast-bo 0 _ V R :-
  rev V [A|Rest],
  Ety = (x\y\ {{ @eq lp:A lp:x lp:y }}), 
  R = {{ fun (x y : lp:A) (e : lp:Ety x y) => lp:Bo x y e }},
  pi x y e\ build-match e (Ety x y)
               (derive-cast-rty  A Rest x)
               (derive-cast-body Rest x)
               (Bo x y e).

derive-cast-rty  A Rest X _ [Y,E] VT R :-    derive-cast-args-ty E X Y [A|Rest] Rest [Y] R.
derive-cast-body Rest Y _ K V VT R :-      derive-cast-args             Rest [Y] R.

derive-cast N :-
  Name is "cast" ^ {any->string N},
  derive-cast-bo N N [] Bo,
  coq-elaborate Bo Bo1 Ty1,
  coq-env-add-const Name Bo1 Ty1 _ C,
  coq-elpi-accumulate "derive.castP.db" (clause _ _ (castP-db N C)).

