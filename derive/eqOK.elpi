/* Correctness of comparison functions                                       */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

pointless F A B R :-
  safe-dest-app A HDA ARGSA,
  safe-dest-app B HDB ARGSB,
  appendR AA [X] ARGSA,
  appendR BB [Y] ARGSB,
  mk-app-hd-beta HDA AA LEFT,
  mk-app-hd-beta HDB BB RIGHT,
  (F LEFT RIGHT R).
%  mk-app RR [X] R.

pred mk-app-hd-beta i:term, i:list term, o:term.
mk-app-hd-beta HD ARGS R :-
  mk-app HD ARGS T,
  hd-beta T [] X XS,
  unwind X XS R.

map-db {{ @elpi.derive.eqK.axiom lp:A lp:F }}
       {{ @elpi.derive.eqK.axiom lp:A lp:F }}
       {{ fun (x : lp:A) (px : axiom lp:A lp:F x) => px }} :- !.
map-db HypTy {{ @elpi.derive.eqK.axiom lp:A lp:_ }}
             {{ fun (x : lp:A) (px : lp:PA x) => lp:R x px }} :-
  safe-dest-app HypTy (indt KR) Args, realiR K (indt KR), !,

  (pi x\ mk-app HypTy [x] (PA x)),

  Msg is "derive.eqOK: no eqOK for " ^ {coq.term->string K},
  assert (eqOK-db K OK) Msg,
 
  (derive.eqOK.mk-app-eqfun OK Args OKLemma),
  (coq.typecheck OKLemma (prod _ Ty x\ prod _ (P x) _)),
  (pi x\ pointless map-db {mk-app HypTy [x]} (P x) Map),
  pi x px\ mk-app OKLemma [x,{mk-app-hd-beta Map [x,px]}] (R x px).

map-db A B _ :- coq.error "derive.eqOK: cannot prove" B "from" A.

namespace derive.eqOK {

mk-app-eqfun X [] X.
mk-app-eqfun X [Y] R :- mk-app X [Y] R.
mk-app-eqfun X [Y,_|YS] R :-
  eq-db Y Y F,
  mk-app X [Y,F] X1, mk-app-eqfun X1 YS R.

branch (prod N T x\ prod M (P x) (B x)) (prod _ _ y\ prod _ (Q y) (Lty y)) L
       (lam N T x\ lam M (P x) (R x)) :- !,
  pi x px\ sigma Proof ProofXPX\
    decl x `x` T =>
    decl px `px` (P x) =>
    (pointless map-db (P x) (Q x) Proof),
    mk-app-hd-beta Proof [x,px] ProofXPX,
    branch (B x px) (Lty x ProofXPX) {mk-app L [x,ProofXPX]} (R x px).

branch _ _ X X.

branches [] _ [].
branches [Lemma | Lemmas] (prod _ S T) [P|PS] :-
  coq.typecheck Lemma LemmaTy,
  branch S LemmaTy Lemma P,
  branches Lemmas (T P) PS.
 
eqK-lem Args K Lemma :-
  safe-dest-app K Kname _,
  eqK-db Kname Lem,
  mk-app Lem Args Lemma.

idx (sort _) IT K _KT IndP A R :-
  eq-db IT IT Cmp,
  mk-app IndP [ {{ @elpi.derive.eqK.axiom lp:IT lp:Cmp }} ] Induction,
  coq.typecheck Induction Inductionty,
  branches {map K (eqK-lem A)} Inductionty KArgs,
  mk-app Induction KArgs R.

params L (prod N S T) I K KT IndP A R :- L > 0, !,
  M is L - 1,
  R = {{ fun (a : lp:S) (fa : a -> a -> bool) => lp:Bo a fa }},
  pi a fa\
    decl a N S =>
    decl fa `fa` {{ lp:a -> lp:a -> bool }} =>
    eq-db a a fa =>
    params M (T a) {mk-app I [a]} {map K (x\ mk-app x [a])} 
                                  {map KT (subst-prod [a])}
                                  {mk-app IndP [a, {{ @elpi.derive.eqK.axiom lp:a lp:fa }}]} [fa,a|A] (Bo a fa).

params 0 Arity T K KT IndP A R :-
  idx Arity T K KT IndP {rev A} R.

main T Suffix C :- 
  assert (T = indt GR) "derive.eqOK: not an inductive type",
  assert (induction-db T IndP) "derive.eqOK: run derive.induction first",
  coq.env.indt GR Ind Lno _ Arity K KT,
  assert (Ind = tt) "derive.eqOK: co-inductive types not supported",

  params Lno Arity T K KT IndP [] CmpOK,

coq.say {coq.term->string CmpOK},

  coq.typecheck CmpOK CmpTy,
  coq.env.add-const {calc ({coq.gr->id GR} ^ Suffix)} CmpOK CmpTy @opaque! Thm,
  C = eqOK-db T Thm,
  coq.elpi.accumulate "derive.eqOK.db" (clause _ _ C).

}
