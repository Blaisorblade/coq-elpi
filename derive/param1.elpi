/* Unary parametricity translation (Realizability)                           */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% Author: Cyril Cohen

:before "subst-lam:fail"
subst-lam XS T TXS :- !, mk-app T XS TXS.

reali-args [] [].
reali-args [X|Xs] [X,XR|XsR] :- do! [
  reali X XR,
  reali-args Xs XsR
].

reali-map [] [].
reali-map [X|Xs] [XR|XsR] :- do! [
  reali X XR,
  reali-map Xs XsR
].

pred reali i:term, o:term.  %@log(reali _ _).

reali (sort prop as P) (lam `s` P x\ prod `s1` x _\ P) :- !.
reali (sort _) (lam `s` (sort (typ U)) x\ prod `s1` x _\ (sort (typ V))) :- !,
  coq-univ-new [] U, coq-univ-new [] V.

reali (lam N T B) (lam N T x\ lam N1 (TRsubst x) xR\ BR x xR) :- !, do! [
  coq-name-suffix `P` N N1,
  reali T TR,
  (pi x xR\ reali x xR => reali (B x) (BR x xR)),
  (TRsubst = x\ {subst-lam [x] TR})
].

reali (prod N T P as Prod) ProdR :- !, do! [
  coq-name-suffix `P` N N1,
  reali T TR,
  (pi x xR\ reali x xR => reali (P x) (PR x xR)),
  ProdR = lam `f` Prod f\ 
       prod N T x\ prod N1 {subst-lam [x] TR} xR\
       {subst-lam [{mk-app f [x]}] (PR x xR)}
].

reali (app [A|Bs]) ARBsR :- !, do! [
   reali A AR,
   reali-args Bs BsR,
   mk-app AR BsR ARBsR
].

reali (let N T V B) LetR :- !, do! [
  coq-name-suffix `P` N N1,
  reali T TR,
  reali V VR,
  (pi x xR\ reali x xR => reali (B x) (BR x xR)),
  LetR = let N T V x\ let N1 TR VR xR\ BR x xR
].

reali (match T P Bs) MR :- !, do! [
  reali T TR, 
  reali-match P PRM,
  reali T TR => reali-map Bs BsR,
  MR = match TR (PRM (x\ match x P Bs)) BsR
].

reali (fix N Rno T F as Fix) FixR :- !, do! [
  RnoR is 2 * Rno + 1,
  RnoR1 is RnoR + 1,
  reali T TR,
  (pi x xR\ reali x xR => reali (F x) (FR x xR)),
  (TRsubst = f\ {subst-lam [f] TR}),
  (pi f xR\ FixBody f xR = let N (TRsubst (F f)) (FR f xR) fr\
      {mk-trivial-match RnoR (TRsubst f) [] fr}),
  (pi f xR\ mk-eta RnoR1 (TRsubst f) (FixBody f xR) (EtaFixBody f xR)),
  coq-name-suffix N 1 N1,
  FixR = (let N T Fix f\ fix N1 RnoR (TRsubst f) xR\ EtaFixBody f xR)
].

:name "reali:end"
reali X _ :- !, coq-say "No reali for " X, fail. % XXX should be "halt"?

% helpers for match return type
pred reali-match i:term, o:((term -> term) -> term).
reali-match (lam N T B) PRM :- pi x\ not (B x = lam _ _ _), !, do! [
  reali T TR,
  (pi x xR\ reali x xR => reali (B x) (BR x xR)),
  coq-name-suffix `P` N N1,
  (pi z z1\ PRM z = 
    lam N T x\ lam N1 {subst-lam [x] TR} xR\ {mk-app (BR x xR) [z x]})
].

reali-match (lam N T B) PRM :- do! [
  reali T TR,
  (pi x xR\ reali x xR => reali-match (B x) (BR x xR)),
  coq-name-suffix N 1 N1,
  (pi z \ PRM z = lam N T x\ lam N1 {subst-lam [x] TR} xR\ BR x xR z)
].

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% translation of inductive types %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred reali-indt i:@gref, i:bool, i:int, i:int, i:term, i:list term, i:list term,
     i:string, o:bool, o:int, o:int, o:term, o:list term, o:list term.
%@log(reali-indt _ _ _ _ _ _ _ _ _ _ _ _ _ _).
reali-indt GR IsInd Lno Luno Ty Knames Ktypes
 	   NameR IsInd LnoR LunoR TyR KnamesR KtypesR :- !,
  LnoR is 2 * Lno, LunoR is 2 * Luno,
  reali (indt GR) (indt NameR) =>
    (reali Ty TyR,
     map Knames (reali-rename-indc NameR) KnamesR,
     map2 Knames Ktypes reali-indc KtypesR).

pred reali-rename-indc i:string, i:term, o:term.
%@log(reali-indc _ _ _).
reali-rename-indc NameR (indc GR) (indc NameR') :-
  coq-gr->id GR Name, NameR' is NameR ^ "_" ^ Name.

pred reali-indc i:term, i:term, o:term.
reali-indc K T TRK :- !,
  reali T TR, subst-lam [K] TR TRK.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Class storage functions: %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred reali-retrieve i:tc-instance, o:prop.
reali-retrieve (tc-instance T _) (reali X XR :- !) :- !,
  coq-env-typeof-gr {term->gr T} (app [_, _, _, X, XR]).

pred reali-store-all-indc i:(list term), o:(list term).
% @log(reali-store-all-indc _ _).
reali-store-all-indc [] [] :- !.
reali-store-all-indc [K|Ks] [KR|KRs] :- !,
  KR = indc GR,
  reali-store GR K KR, reali-store-all-indc Ks KRs.

pred reali-store i:string, i:term, i:term.
% @log(reali-store _ _ _ _).
reali-store N X XR :- !,
  Nreali is "reali_" ^ {coq-gr->id N},
  Args = [hole, hole, X, XR],
  coq-elaborate (app [{{@store_reali}}|Args]) T1 T2,
  coq-env-add-const Nreali T1 T2 _ (const GR),
  coq-TC-declare-instance GR 0 tt.

%%%%%%%%%%%%%%%%%%%%%%%
% toplevel predicates %
%%%%%%%%%%%%%%%%%%%%%%%

pred reali-with-TC i:prop.
reali-with-TC P :- with-TC {{@reali_db}} reali-retrieve P.

pred reali-term i:term, o:term, o:term, o:term, o:term.
% @log(reali-term _ _ _ _ _ _).
reali-term X X' _ XR' TyR :- !,
  reali-with-TC (reali X XR),
  coq-elaborate X X' _,
  coq-elaborate XR XR' TyR.

pred reali-const i:term, o:term, o:term, o:term, o:term.
% @log(reali-const _ _ _ _ _ _).
reali-const (const GR) X Ty XR TyR :- !,
  coq-env-const GR V _,
  reali-term V X Ty XR TyR.
reali-const NotAConst _X _Ty _XR _TyR :- !,
  coq-say "Not a const:" NotAConst, fail.

pred reali-env-add i:term, i:string.
reali-env-add (const _ as Term) NameR :- !, do! [
  reali-const Term _ _ XR TyR,
  coq-env-add-const NameR XR TyR _ TermR,
  reali-store NameR Term TermR
].

reali-push-clause 0 V1 V2 Rec A B (param1-db Ax Bx :- RecR) :-
  mk-app A {rev V1} Ax, mk-app B {rev V2} Bx, rev Rec RecR.
reali-push-clause N V1 V2 Rec A B (pi x y\ C1 x y) :- N > 0, !, M is N - 1,
  pi x y\ reali-push-clause M [x|V1] [y,x|V2] [param1-db x y|Rec] A B (C1 x y).

pred reali-env-add i:term, i:string.
reali-env-add (indt GR as Ind) NameR :- !, do! [
  coq-env-indt GR IsInd Lno Luno Ty Knames Ktypes,
  reali-with-TC
     (reali-indt GR IsInd Lno Luno Ty Knames Ktypes
 	   	 NameR _ LnoR _ TyR KnamesR KtypesR),
  coq-env-indt->decl {subst-lam [Ind] TyR} LnoR
      (indt NameR) KnamesR KtypesR [] DeclR,
  coq-elaborate-ind-decl DeclR DeclR1,
  coq-env-add-indt DeclR1 (indt GRR),
  reali-store NameR Ind (indt GRR),
  coq-env-indt GRR _ _ _ _ RealNamesR _,
  reali-store-all-indc Knames RealNamesR,
  reali-push-clause Lno [] [] [] (indt GR) (indt GRR) C,
  coq-elpi-accumulate "derive.param1.db" (clause _ _ C)
].

derive-param1 In Out :- coq-locate In T, reali-env-add T Out.

/*
%%%%%%%%%%%%%%%%%%%%%
% Tactic entrypoint %
%%%%%%%%%%%%%%%%%%%%%

% We disable coq-refiner
:before "refiner-assign-evar"
  evar _ _ _ :- !.

pred ctx->TC i:(list prop), o:(list (pair term term)).
ctx->TC [] [] :- !.
ctx->TC [decl X _ Ty |Xs] [pr X Ty|Is] :- !, ctx->TC Xs Is.
ctx->TC [def X _ _ _ Ty |Xs] [pr X Ty|Is] :- !, ctx->TC Xs Is.

solve _ [goal Ctx Ev (app[{{@reali}}, T, TR, X, XR]) _] _ :- !,
  coq-evd-print,
  coq-say "goal->TC" {ctx->TC Ctx},
  coq-say "searching reali for" X,
  reali-with-TC (reali T TR),
  reali-with-TC (reali X XR),
  Ev = app [{{@Reali}}, T, TR, X, XR],
  coq-typecheck Ev Ty,
  coq-say "Ty=" Ty.

*/
