/* induction principles                                                      */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

namespace derive.induction {

type induction-hyp term -> term -> prop.

strip-last-arg (app [Hd|Args]) X R :-
  appendR Prefix [X] Args,
  if (Prefix = []) (R = Hd) (mk-app Hd Prefix R).

pred prove-args i:list term, i:list term, o:list term.
prove-args [] [] [].
prove-args [X,Pr|Args] [_,PX|ArgsT] [X,QPr|QArgs] :-
  strip-last-arg PX X P,
  copy P Goal, !,
  ((not(P = Goal), map-db P Goal Q, hd-beta Q [X,Pr] QP QPS, unwind QP QPS QPr) ; QPr = Pr),
  prove-args Args ArgsT QArgs.

branch K _ V VT R :-
  induction-hyp K IH,
  prove-args V VT Args,
  mk-app IH Args R,
  coq.typecheck R _, !.

oty _ _ VT P :-
  last VT XT,
  copy XT P.

mk-map-self-clause [_] T P IH (map-db T P IH).

mk-map-self-clause [_,_|Args] T P IH (pi x y\ C x y) :-
  pi x y\ mk-map-self-clause Args {mk-app T [x,y]} {mk-app P [x,y]} {mk-app IH [x,y]} (C x y).

branches (prod Name S T) Ity Args IH N M (prod Name S F1) (lam Name S R1) :- !,
  pi x\ decl x Name S =>
    branches (T x) Ity [x|Args] IH {calc (N + 1)} M (F1 x) (R1 x).

branches (sort _) Ity Args IH Rno Rno Fty (lam `x` ItyArgs Bo) :- do! [
  mk-app Ity {rev Args} ItyArgs,
  copy ItyArgs PArgs, !,
  Fty = prod `x` ItyArgs (_\ PArgs),
  copy Ity P,
  mk-map-self-clause Args Ity P IH C,
  pi x\ decl x `x` ItyArgs =>
    C =>
    build-match x ItyArgs oty branch (Bo x)
].

hyp (prod N S T) (prod N Q R) :- !,
  copy S Q, !,
  pi x \ decl x N Q => hyp (T x) (R x).
hyp S Q :- copy S Q, !.

hyps [K|KS] [KT|KTS] Ity Arity (lam Name Ind Bo) :-
  term->gr K GRK,
  coq.name-suffix `H` {coq.gr->id GRK} Name,
  hyp KT Ind, !,
  pi x\
    induction-hyp K x =>
    decl x Name Ind =>
    hyps KS KTS Ity Arity (Bo x).

hyps [] [] Ity Arity (fix `IH` Recno Fty Bo) :-
  pi f\ sigma C\
    decl f `IH` Fty => branches Arity Ity [] f 0 Recno Fty (Bo f).

truncated-predicate-ty (sort _) T :-
  T = sort (typ U), coq.univ.new [] U.
truncated-predicate-ty (prod N S T) (prod N S R) :-
  pi x\ truncated-predicate-ty (T x) (R x).
  
params N Ity K KT (prod Nx Sx x\ prod NP (SP x) (T x)) (lam Nx Sx x\ lam NP (SP x) (R1 x)) :- N > 0, !,
  M is N - 2,
  pi x px\
    decl x Nx Sx => decl px NP (SP x) =>
    map-db px px (lam `x` x a\ lam `pa` (app[px,a]) pa\ pa) =>
    params M
      {mk-app Ity [x,px]} {map K (k\ mk-app k [x,px])} {map KT (subst-prod [x,px])}
      (T x px) (R1 x px).

mk-copy-clause Ity P C :-
 safe-dest-app Ity IT ITArgs,
 C = [(copy IT P :- !),
      (pi Args Rest\
        copy (app[IT|Args]) (app[P|Rest]) :- !, appendR ITArgs Rest Args)].

params 0 Ity K KT Arity (lam `P` Pty p\ Bo p) :-
  truncated-predicate-ty Arity Pty,
  pi p\ sigma Clause\
    mk-copy-clause Ity p Clause,
    Clause => decl p `P` Pty => hyps K KT Ity Arity (Bo p).

ensure-typechecks R RT :- coq.typecheck R RT, !.
ensure-typechecks R _ :-
  coq.error "derive.induction: Generate ill-typed term:" {coq.term->string R}.

pred main i:term, i:string, o:list prop.
main T Name [Clause] :- do! [
  assert (T = indt _) "derive.induction: not an inductive type",
  assert (reali T TR) {calc (
    "derive.induction: no unary parametricity translation for" ^
    {coq.term->string T} ^ ", use derive.param1 first")},
  TR = indt GRR,
  coq.env.indt GRR Ind Lno _ Arity K KT,
  assert (Ind = tt) "derive.induction: Coinductive types are not supported",

  params Lno TR K KT Arity R,
  ensure-typechecks R RT,
  coq.env.add-const Name R RT _ I,

  Clause = (induction-db T I :- !),
  coq.elpi.accumulate "derive.induction.db" (clause _ (before "induction-db:fail") Clause)
].

}
